Description: Contrail update for ifmap-python-client
Origin: OpenContrail, https://raw.githubusercontent.com/Juniper/contrail-third-party/master/ifmap-python-patch1.diff
Forwarded: no
Last-Update: 2014-04-11

--- ifmap-python-client-0.1.orig/ifmap/client.py
+++ ifmap-python-client-0.1/ifmap/client.py
@@ -5,7 +5,18 @@
 # Open Source, see LICENSE
 #
 
+from _ssl import PROTOCOL_SSLv3, PROTOCOL_SSLv23, PROTOCOL_TLSv1
+import gevent
+import geventhttpclient
+from geventhttpclient import HTTPClient
+
 import urllib
+
+import base64
+import cStringIO
+
+
+
 from logging import getLogger
 
 log = getLogger(__name__) # when imported, the logger will be named "ifmap.client"
@@ -23,23 +34,35 @@ except ImportError:
 			f = http_client_lib.urlopen(http_client_lib.Request(url, body, headers))
 			return f.info(), f.read()
 
+#import urllib2 as http_client_lib
+#HttpException = (http_client_lib.URLError, http_client_lib.HTTPError)
+#class Http(): # wrapper to use when httplib2 not available
+#	def request(self, url, method, body, headers):
+#		f = http_client_lib.urlopen(http_client_lib.Request(url, body, headers))
+#		return f.info(), f.read()
+
 namespaces = {
 	'env'   :   "http://www.w3.org/2003/05/soap-envelope",
 	'ifmap' :   "http://www.trustedcomputinggroup.org/2010/IFMAP/2",
-	'meta'  :   "http://www.trustedcomputinggroup.org/2010/IFMAP-METADATA/2",
+	'meta'  :   "http://www.trustedcomputinggroup.org/2010/IFMAP-METADATA/2"
 }
 
 class client:
 	"""
 	IF-MAP client
 	"""
-	http = Http()
+	#http = Http()
+    
 	__url = None
 	__session_id = None
 	__publisher_id = None
 	__last_sent = None
 	__last_received = None
 	__namespaces = None
+	__ssl_options = {
+		'cert_reqs'   : gevent.ssl.CERT_NONE,
+		'ssl_version' : PROTOCOL_SSLv3
+	}
 
 	__envelope ="""<?xml version="1.0" encoding="UTF-8"?>
 <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope" %(ns)s>
@@ -49,18 +72,31 @@ class client:
 </env:Envelope>
 """
 
-	def __init__(self, url, user=None, password=None, namespaces={}):
+	def __init__(self, url, user=None, password=None, namespaces={}, ssl_opts=None):
 		if user and password:
-			self.__password_mgr=http_client_lib.HTTPPasswordMgrWithDefaultRealm()
-			self.__password_mgr.add_password(None, url, user, password)
-			handler = http_client_lib.HTTPBasicAuthHandler(self.__password_mgr)
-			opener = http_client_lib.build_opener(handler)
-			http_client_lib.install_opener(opener)
-
-		if namespaces:
-				self.__namespaces = namespaces
+#			self.__password_mgr=http_client_lib.HTTPPasswordMgrWithDefaultRealm()
+#			self.__password_mgr.add_password(None, url, user, password)
+#			handler = http_client_lib.HTTPBasicAuthHandler(self.__password_mgr)
+#			opener = http_client_lib.build_opener(handler)
+#			http_client_lib.install_opener(opener)
+
+                        #pycurl.global_init(pycurl.GLOBAL_SSL)
+
+			pass
+
+		#if namespaces:
+		self.__namespaces = namespaces
+		if ssl_opts:
+			self.__ssl_options.update(ssl_opts)
 
 		self.__url = url
+                self.__username = user
+                self.__password = password
+                self._http = HTTPClient(*self.__url, ssl = True,
+                                        connection_timeout = None,
+                                        network_timeout = None,
+                                        ssl_options = self.__ssl_options)
+
 
 	def last_sent(self):
 		return self.__last_sent
@@ -71,31 +107,77 @@ class client:
 	def envelope(self, body) :
 		_ns = ""
 		for ns_prefix, ns_uri in self.__namespaces.items():
-			if ns_prefix == "env": break # don't add the envelope namespace again
+			#if ns_prefix == "env": break # don't add the envelope namespace again
+			if ns_prefix == "env": continue # don't add the envelope namespace again
 			_ns += "xmlns:"+ns_prefix+'="'+ns_uri+'" '
 		return self.__envelope % {'body':body, 'ns': _ns}
 
 	def call(self, method, body):
 		xml = self.envelope(body)
+		#headers={
+		#  'Content-type': 'text/xml; charset="UTF-8"',
+		#  'Content-length': str(len(xml)),
+		#  "SOAPAction": '"%s"' % (method),
+		#}
+
+                base64string = base64.encodestring('%s:%s' % (self.__username, self.__password)).replace('\n', '')
+		# pycurl
+		#headers=[
+		#  'Content-type: text/xml; charset="UTF-8"',
+		#  'Content-length: %s' %(str(len(xml))),
+                #  'Authorization : Basic %s' %(base64string),
+		#  'SOAPAction: %s' % (method),
+		#]
+
+                # geventhttp
 		headers={
 		  'Content-type': 'text/xml; charset="UTF-8"',
-		  'Content-length': str(len(xml)),
-		  "SOAPAction": '"%s"' % (method),
+		  'Content-length': '%s' %(str(len(xml))),
+                  'Authorization': 'Basic %s' %(base64string),
+		  'SOAPAction': '%s' % (method),
 		}
+
 		try:
 				log.info("sending IF-MAP message to server")
 				log.debug("========  sending IF-MAP message ========")
 				log.debug("\n%s\n", xml)
 				log.debug("========  /sending IF-MAP message ========")
 
-				response, content = self.http.request(self.__url,"POST", body=xml, headers=headers )
+				#response, content = self.http.request(self.__url,"POST", body=xml, headers=headers )
+
+                                #self.http = pycurl.Curl()
+                                #self.http.setopt(pycurl.URL, self.__url)
+                                #self.http.setopt(pycurl.HTTPHEADER, headers)
+                                #self.http.setopt(pycurl.POSTFIELDS, xml)
+                                #self.http.setopt(pycurl.VERBOSE, True)
+                                #self.http.setopt(pycurl.SSL_VERIFYPEER, 0)   
+                                #self.http.setopt(pycurl.SSL_VERIFYHOST, 0)
+                                #content = cStringIO.StringIO()
+                                #self.http.setopt(pycurl.WRITEFUNCTION,
+                                #                 content.write)
+                                #self.http.perform()
+
+				#self.http = HTTPClient(*self.__url, ssl = True,
+				#                       ssl_options = {'cert_reqs': gevent.ssl.CERT_NONE,
+				#		                      'ssl_version': PROTOCOL_SSLv3})
+				#response = self.http.post('/', body = xml, headers = headers)
+				response = self._http.post('/', body = xml, headers = headers)
+				content = response.read()
+
 				self.__last_sent = xml
+
+				#self.__last_received = content
+				#pycurl self.__last_received = content.getvalue()
 				self.__last_received = content
 
 				log.debug("========  received IF-MAP response ========")
+				#log.debug("\n%s\n", content)
+				#pycurl log.debug("\n%s\n", content.getvalue())
 				log.debug("\n%s\n", content)
 				log.debug("========  /receive IF-MAP response ========")
 
+				#return content
+				#pycurl return content.getvalue()
 				return content
 
 		except	HttpException, e:
--- ifmap-python-client-0.1.orig/ifmap/id.py
+++ ifmap-python-client-0.1/ifmap/id.py
@@ -139,7 +139,7 @@ class Identity(ifmapIDFactory):
 		if self.__type:
 			self.__XML +=' type="'+self.__type+'"'
 		if self.__other_type:
-			self.__XML +=' other-type="'+self.__other_type+'"'
+			self.__XML +=' other-type-definition="'+self.__other_type+'"'
 		if self.__administrative_domain:
 			self.__XML += ' administrative-domain="'+self.__administrative_domain+'"'
 		self.__XML += " />"
--- ifmap-python-client-0.1.orig/ifmap/metadata.py
+++ ifmap-python-client-0.1/ifmap/metadata.py
@@ -33,4 +33,4 @@ class Metadata(MetadataBase):
     def __str__(self):
         __attr = ' '+ attr(self.__attributes)
         return '<metadata><' + self.__name + self.__ns_uri + __attr + '>' + self.__value + self.__elements + '</' + self.__name + '></metadata>'
-        
\ No newline at end of file
+        
--- ifmap-python-client-0.1.orig/ifmap/request.py
+++ ifmap-python-client-0.1/ifmap/request.py
@@ -15,6 +15,7 @@ class NewSessionRequest(RequestBase):
 		self.__max_poll_result = max_poll_result
 
 	def __str__(self):
+                #import pdb; pdb.set_trace()
 		return '<ifmap:newSession %s' % (attr({'max-poll-result-size':self.__max_poll_result})) + '/>';
 		
 class RenewSessionRequest(RequestBase):
--- ifmap-python-client-0.1.orig/ifmap/response.py
+++ ifmap-python-client-0.1/ifmap/response.py
@@ -16,10 +16,13 @@ class Response():
         Take a result string and process it
         """
         if result: 
-            __env = ElementTree.fromstring(result)
-            __body = __env.find('{http://www.w3.org/2003/05/soap-envelope}Body')
-            __response = __body.find('{http://www.trustedcomputinggroup.org/2010/IFMAP/2}response')
-            self.__xml = __response.find('*')
+            env = ElementTree.fromstring(result)
+            body = env.find('{http://www.w3.org/2003/05/soap-envelope}Body')
+            response = body.find('{http://www.trustedcomputinggroup.org/2010/IFMAP/2}response')
+            # xml.etree.ElementTree find is broken in python 2.6
+            children = response.findall('*')
+            if len(children):
+                self.__xml = children[0]
             
     def element(self):
         """
@@ -38,6 +41,7 @@ class newSessionResult(Response):
     newSessionResult
     """
     def __init__(self, result):
+        #import pdb; pdb.set_trace()
         self.__newSession = Response(result).element()
         
     def get_session_id(self):
@@ -48,4 +52,4 @@ class newSessionResult(Response):
         
 
 
- 
\ No newline at end of file
+ 
--- ifmap-python-client-0.1.orig/ifmap/util.py
+++ ifmap-python-client-0.1/ifmap/util.py
@@ -13,7 +13,7 @@ def attr(attributes):
     if attributes and (type(attributes) == type({})): # check if it is a dictionary
         __xml = ""
         for label, value in attributes.items():
-            if value:
+            if value != None:
                 __xml += label + '="' + value + '" '
         return __xml
     else:
@@ -25,9 +25,10 @@ def link_ids(id1, id2):
     Returns XML for id1 or links id1 and id2 together
     """
     if id1 and id2: # Both exist, so link them
-        return '<link>' +  id1 + id2 + '</link>'
+        #return '<link>' +  id1 + id2 + '</link>'
+        return id1 + id2
     else:
         return id1
     
 
-    
\ No newline at end of file
+    
--- ifmap-python-client-0.1.orig/testmap.py
+++ ifmap-python-client-0.1/testmap.py
@@ -140,33 +140,71 @@ from ifmap.metadata import Metadata
 
 def client_test():
     print 'testing ifmap client (this requires a running server)'
-    mapclient = client("https://127.0.0.1:8443", 'test', 'test', namespaces)
+    mapclient = client("https://127.0.0.1:443", 'test', 'test', namespaces)
 
     result = mapclient.call('newSession', NewSessionRequest())
     mapclient.set_session_id(newSessionResult(result).get_session_id())
     mapclient.set_publisher_id(newSessionResult(result).get_publisher_id())
 
-    meta = str(Metadata('role', 'employee', {'ifmap-cardinality':'multiValue'}))
-    pubreq = PublishRequest(mapclient.get_session_id(), str(PublishUpdateOperation(id1=str(IPAddress("10.0.0.1")), metadata=meta, lifetime='forever')))
+    meta = str(Metadata('iperms', 'rwxrwxrwx',
+                        {'ifmap-cardinality':'multiValue'}, ns_prefix = "ct",
+                        elements = '<ct:mperms>rwxrwxrwx</ct:mperms>'))
+    pubreq = PublishRequest(mapclient.get_session_id(),
+                 str(PublishUpdateOperation(
+                        id1=str(Identity(name = "ct:cloud", type = "other",
+                                         other_type = "extended")),
+                        metadata=meta,
+                        lifetime='forever')))
     result = mapclient.call('publish', pubreq)
 
-    searchreq = SearchRequest(mapclient.get_session_id(), str(IPAddress("10.0.0.1")), validation="None")
-    result = mapclient.call('search', searchreq)
-
-    subreq = SubscribeRequest(mapclient.get_session_id(), operations=str(SubscribeUpdateOperation('subscription-1',str(IPAddress("10.0.0.1")))))
-    result = mapclient.call('subscribe', subreq)
-
-    pollreq = PollRequest(mapclient.get_session_id())
-    result = mapclient.call('poll', pollreq)
-
-    subreq = SubscribeRequest(mapclient.get_session_id(), operations=str(SubscribeDeleteOperation('subscription-1')))
-    result = mapclient.call('subscribe', subreq)
+    meta = str(Metadata('iperms', 'rwxrwxrwx',
+                        {'ifmap-cardinality':'multiValue'}, ns_prefix = "ct",
+                        elements = '<ct:mperms>rwxrwxrwx</ct:mperms>'))
+    pubreq = PublishRequest(mapclient.get_session_id(),
+                 str(PublishUpdateOperation(
+                        id1=str(Identity(name = "ct:tenant:infra", type = "other",
+                                         other_type = "extended")),
+                        metadata=meta,
+                        lifetime='forever')))
+    result = mapclient.call('publish', pubreq)
 
-    purgereq = PurgeRequest(mapclient.get_session_id(), mapclient.get_publisher_id())
-    result = mapclient.call('purge', purgereq)
+    meta = str(Metadata('belongs-to', '',
+                       {'ifmap-cardinality':'singleValue'}, ns_prefix = "ct",
+                       elements = '<ct:mperms>rwxrwxrwx</ct:mperms>'))
+    pubreq = PublishRequest(mapclient.get_session_id(),
+                 str(PublishUpdateOperation(
+                        id1=str(Identity(name = "ct:cloud", type = "other",
+                                         other_type = "extended")),
+                        id2=str(Identity(name = "ct:tenant:infra", type = "other",
+                                         other_type = "extended")),
+                        metadata=meta,
+                        lifetime='forever')))
+    result = mapclient.call('publish', pubreq)
 
-    endreq = EndSessionRequest(mapclient.get_session_id())
-    result = mapclient.call('endSession', endreq)
+    #meta = str(Metadata('role', 'employee', {'ifmap-cardinality':'multiValue'}))
+    #pubreq = PublishRequest(mapclient.get_session_id(), str(PublishUpdateOperation(id1=str(IPAddress("10.0.0.1")), metadata=meta, lifetime='forever')))
+    #result = mapclient.call('publish', pubreq)
+
+    #searchreq = SearchRequest(mapclient.get_session_id(), str(IPAddress("10.0.0.1")), validation="None")
+    #result = mapclient.call('search', searchreq)
+
+    #subreq = SubscribeRequest(mapclient.get_session_id(), operations=str(SubscribeUpdateOperation('subscription-1',str(IPAddress("10.0.0.1")))))
+    #result = mapclient.call('subscribe', subreq)
+
+    #pollreq = PollRequest(mapclient.get_session_id())
+    #result = mapclient.call('poll', pollreq)
+
+    #subreq = SubscribeRequest(mapclient.get_session_id(), operations=str(SubscribeDeleteOperation('subscription-1')))
+    #result = mapclient.call('subscribe', subreq)
+
+    #purgereq = PurgeRequest(mapclient.get_session_id(), mapclient.get_publisher_id())
+    #result = mapclient.call('purge', purgereq)
+
+    #endreq = EndSessionRequest(mapclient.get_session_id())
+    #result = mapclient.call('endSession', endreq)
+    import time
+    while True:
+        time.sleep(10)
 
 
 
